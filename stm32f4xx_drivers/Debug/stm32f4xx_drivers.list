
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c64  08000c64  00010c6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c64  08000c64  00010c6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c64  08000c6c  00010c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c64  08000c64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c6c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c6c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000161a  00000000  00000000  00010c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004dc  00000000  00000000  000122b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00012920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020d1  00000000  00000000  00012a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018e1  00000000  00000000  00014b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008d59  00000000  00000000  00016422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f17b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a4  00000000  00000000  0001f1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c40 	.word	0x08000c40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c40 	.word	0x08000c40

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
void SPI2_Init(void);
void delay(void);
uint8_t SPI_VerifyResponse(uint8_t ackByte);

int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80001ea:	4a62      	ldr	r2, [pc, #392]	; (8000374 <main+0x190>)
 80001ec:	f107 030c 	add.w	r3, r7, #12
 80001f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t dummy_read = 0xFF;
 80001f6:	23ff      	movs	r3, #255	; 0xff
 80001f8:	72fb      	strb	r3, [r7, #11]
	uint8_t dummy_write;
	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI_GPIOInit();
 80001fa:	f000 f8c1 	bl	8000380 <SPI_GPIOInit>

	// This function is used to initialize the SPI2 peripheral parameter
	SPI2_Init();
 80001fe:	f000 f8ed 	bl	80003dc <SPI2_Init>
	 * making SSOE 1 does NSS output enable
	 * The NSS Pin is automatically managed by hardware.
	 * i.e When SPE = 1, NSS pulled to Low
	 * and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	485c      	ldr	r0, [pc, #368]	; (8000378 <main+0x194>)
 8000206:	f000 fcdb 	bl	8000bc0 <SPI_SSOEConfig>

	// enable spi peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 800020a:	2101      	movs	r1, #1
 800020c:	485a      	ldr	r0, [pc, #360]	; (8000378 <main+0x194>)
 800020e:	f000 fcbb 	bl	8000b88 <SPI_PeripheralControl>

	// first send length information
	uint8_t dataLength = strlen(user_data);
 8000212:	f107 030c 	add.w	r3, r7, #12
 8000216:	4618      	mov	r0, r3
 8000218:	f7ff ffdc 	bl	80001d4 <strlen>
 800021c:	4603      	mov	r3, r0
 800021e:	b2db      	uxtb	r3, r3
 8000220:	727b      	strb	r3, [r7, #9]
	SPI_SendData(SPI2,&dataLength,1);
 8000222:	f107 0309 	add.w	r3, r7, #9
 8000226:	2201      	movs	r2, #1
 8000228:	4619      	mov	r1, r3
 800022a:	4853      	ldr	r0, [pc, #332]	; (8000378 <main+0x194>)
 800022c:	f000 fc3e 	bl	8000aac <SPI_SendData>

	// Lets confirm SPI is not busy
	while(SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG));
 8000230:	bf00      	nop
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	4850      	ldr	r0, [pc, #320]	; (8000378 <main+0x194>)
 8000236:	f000 fc25 	bl	8000a84 <SPI_GetFlagStatus>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f8      	bne.n	8000232 <main+0x4e>

	SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 8000240:	f107 030c 	add.w	r3, r7, #12
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffc5 	bl	80001d4 <strlen>
 800024a:	4602      	mov	r2, r0
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	4619      	mov	r1, r3
 8000252:	4849      	ldr	r0, [pc, #292]	; (8000378 <main+0x194>)
 8000254:	f000 fc2a 	bl	8000aac <SPI_SendData>

	// Lets confirm SPI is not busy
	while(SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG));
 8000258:	bf00      	nop
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	4846      	ldr	r0, [pc, #280]	; (8000378 <main+0x194>)
 800025e:	f000 fc11 	bl	8000a84 <SPI_GetFlagStatus>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d1f8      	bne.n	800025a <main+0x76>

	// Disable spi peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 8000268:	2100      	movs	r1, #0
 800026a:	4843      	ldr	r0, [pc, #268]	; (8000378 <main+0x194>)
 800026c:	f000 fc8c 	bl	8000b88 <SPI_PeripheralControl>

	while(1)
	{
		//wait button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000270:	bf00      	nop
 8000272:	2100      	movs	r1, #0
 8000274:	4841      	ldr	r0, [pc, #260]	; (800037c <main+0x198>)
 8000276:	f000 fb43 	bl	8000900 <GPIO_ReadFromInputPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0f8      	beq.n	8000272 <main+0x8e>

		//to avoid button de-bouning relate issuse 200ms delay
		delay();
 8000280:	f000 f8ca 	bl	8000418 <delay>

		// enable the SPI2 Peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	483c      	ldr	r0, [pc, #240]	; (8000378 <main+0x194>)
 8000288:	f000 fc7e 	bl	8000b88 <SPI_PeripheralControl>

		//1. CMD_LED_CTR
		uint8_t commandCode = COMMAND_LED_CTRL;
 800028c:	2350      	movs	r3, #80	; 0x50
 800028e:	723b      	strb	r3, [r7, #8]
		uint8_t ackByte;
		uint8_t args[2];

		SPI_SendData(SPI2, &commandCode,1);
 8000290:	f107 0308 	add.w	r3, r7, #8
 8000294:	2201      	movs	r2, #1
 8000296:	4619      	mov	r1, r3
 8000298:	4837      	ldr	r0, [pc, #220]	; (8000378 <main+0x194>)
 800029a:	f000 fc07 	bl	8000aac <SPI_SendData>

		//send some dummy bits (1 byte) fetch the respone from the slave
		SPI_SendData(SPI2, &dummy_read,1);
 800029e:	f107 030b 	add.w	r3, r7, #11
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	4834      	ldr	r0, [pc, #208]	; (8000378 <main+0x194>)
 80002a8:	f000 fc00 	bl	8000aac <SPI_SendData>

		//send some dummy bits (1 byte) fetch the respone from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80002ac:	f107 030a 	add.w	r3, r7, #10
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	4830      	ldr	r0, [pc, #192]	; (8000378 <main+0x194>)
 80002b6:	f000 fbf9 	bl	8000aac <SPI_SendData>

		// Recieve Data
		SPI_ReceiveData(SPI2, &ackByte, 1);
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	2201      	movs	r2, #1
 80002be:	4619      	mov	r1, r3
 80002c0:	482d      	ldr	r0, [pc, #180]	; (8000378 <main+0x194>)
 80002c2:	f000 fc2a 	bl	8000b1a <SPI_ReceiveData>

		// verify response
		if (SPI_VerifyResponse(ackByte))
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f8ba 	bl	8000442 <SPI_VerifyResponse>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d007      	beq.n	80002e4 <main+0x100>
		{
			//send arguments
			args[0] = ANALOG_PIN_0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	713b      	strb	r3, [r7, #4]
			SPI_SendData(SPI2,args,1);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2201      	movs	r2, #1
 80002dc:	4619      	mov	r1, r3
 80002de:	4826      	ldr	r0, [pc, #152]	; (8000378 <main+0x194>)
 80002e0:	f000 fbe4 	bl	8000aac <SPI_SendData>

		//2. CMD_SENSOR_READ < analog pin number(1) >

		//wait till button is pressed

		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 80002e4:	bf00      	nop
 80002e6:	2100      	movs	r1, #0
 80002e8:	4824      	ldr	r0, [pc, #144]	; (800037c <main+0x198>)
 80002ea:	f000 fb09 	bl	8000900 <GPIO_ReadFromInputPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f8      	beq.n	80002e6 <main+0x102>

		// to avoid button de-boucing related issuse 200ms of delay
		delay();
 80002f4:	f000 f890 	bl	8000418 <delay>

		commandCode = COMMAND_SENSOR_READ;
 80002f8:	2351      	movs	r3, #81	; 0x51
 80002fa:	723b      	strb	r3, [r7, #8]

		//send command read to clear off the RXNE
		SPI_SendData(SPI2,&commandCode,1);
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	2201      	movs	r2, #1
 8000302:	4619      	mov	r1, r3
 8000304:	481c      	ldr	r0, [pc, #112]	; (8000378 <main+0x194>)
 8000306:	f000 fbd1 	bl	8000aac <SPI_SendData>

		//insert some delay so that slave can ready with the data
		delay();
 800030a:	f000 f885 	bl	8000418 <delay>

		//send some dummy bits (1 byte) fetch the respone from the slave
		SPI_SendData(SPI2, &dummy_read,1);
 800030e:	f107 030b 	add.w	r3, r7, #11
 8000312:	2201      	movs	r2, #1
 8000314:	4619      	mov	r1, r3
 8000316:	4818      	ldr	r0, [pc, #96]	; (8000378 <main+0x194>)
 8000318:	f000 fbc8 	bl	8000aac <SPI_SendData>

		//send some dummy bits (1 byte) fetch the respone from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800031c:	f107 030a 	add.w	r3, r7, #10
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	4814      	ldr	r0, [pc, #80]	; (8000378 <main+0x194>)
 8000326:	f000 fbc1 	bl	8000aac <SPI_SendData>

		// Recieve Data
		SPI_ReceiveData(SPI2, &ackByte, 1);
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	4811      	ldr	r0, [pc, #68]	; (8000378 <main+0x194>)
 8000332:	f000 fbf2 	bl	8000b1a <SPI_ReceiveData>

		// verify response
		if (SPI_VerifyResponse(ackByte))
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f882 	bl	8000442 <SPI_VerifyResponse>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d009      	beq.n	8000358 <main+0x174>
		{
			//send arguments
			args[0] = LED_PIN;
 8000344:	2309      	movs	r3, #9
 8000346:	713b      	strb	r3, [r7, #4]
			args[1] = LED_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	717b      	strb	r3, [r7, #5]
			SPI_SendData(SPI2,args,2);
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2202      	movs	r2, #2
 8000350:	4619      	mov	r1, r3
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <main+0x194>)
 8000354:	f000 fbaa 	bl	8000aac <SPI_SendData>
		}

		// Lets confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG));
 8000358:	bf00      	nop
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	4806      	ldr	r0, [pc, #24]	; (8000378 <main+0x194>)
 800035e:	f000 fb91 	bl	8000a84 <SPI_GetFlagStatus>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d1f8      	bne.n	800035a <main+0x176>

		// Disable spi peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000368:	2100      	movs	r1, #0
 800036a:	4803      	ldr	r0, [pc, #12]	; (8000378 <main+0x194>)
 800036c:	f000 fc0c 	bl	8000b88 <SPI_PeripheralControl>
	{
 8000370:	e77e      	b.n	8000270 <main+0x8c>
 8000372:	bf00      	nop
 8000374:	08000c58 	.word	0x08000c58
 8000378:	40003800 	.word	0x40003800
 800037c:	40020000 	.word	0x40020000

08000380 <SPI_GPIOInit>:
	}
	return 0;
}

void SPI_GPIOInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <SPI_GPIOInit+0x58>)
 8000388:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800038a:	2302      	movs	r3, #2
 800038c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800038e:	2305      	movs	r3, #5
 8000390:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000392:	2300      	movs	r3, #0
 8000394:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000396:	2300      	movs	r3, #0
 8000398:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800039a:	2302      	movs	r3, #2
 800039c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800039e:	230d      	movs	r3, #13
 80003a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f927 	bl	80005f8 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80003aa:	230e      	movs	r3, #14
 80003ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f921 	bl	80005f8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80003b6:	230f      	movs	r3, #15
 80003b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f91b 	bl	80005f8 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80003c2:	230c      	movs	r3, #12
 80003c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f915 	bl	80005f8 <GPIO_Init>


}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40020400 	.word	0x40020400

080003dc <SPI2_Init>:

void SPI2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <SPI2_Init+0x38>)
 80003e4:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_Busconfig = SPI_BUS_CONFIG_FD;
 80003e6:	2301      	movs	r3, #1
 80003e8:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80003ea:	2301      	movs	r3, #1
 80003ec:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates sclk of 8MHz
 80003ee:	2302      	movs	r3, #2
 80003f0:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80003f2:	2300      	movs	r3, #0
 80003f4:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80003f6:	2300      	movs	r3, #0
 80003f8:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80003fa:	2300      	movs	r3, #0
 80003fc:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardward slave management enabled for NSS Pin
 80003fe:	2300      	movs	r3, #0
 8000400:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000402:	463b      	mov	r3, r7
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fae9 	bl	80009dc <SPI_Init>
}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40003800 	.word	0x40003800

08000418 <delay>:

	GPIO_Init(&GPIOBtn);
}

void delay(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<50000/2;i++);
 800041e:	2300      	movs	r3, #0
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	e002      	b.n	800042a <delay+0x12>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3301      	adds	r3, #1
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000430:	4293      	cmp	r3, r2
 8000432:	d9f7      	bls.n	8000424 <delay+0xc>
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackByte)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	4603      	mov	r3, r0
 800044a:	71fb      	strb	r3, [r7, #7]
	if(ackByte == 0xF5)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2bf5      	cmp	r3, #245	; 0xf5
 8000450:	d101      	bne.n	8000456 <SPI_VerifyResponse+0x14>
	{
		return 1;
 8000452:	2301      	movs	r3, #1
 8000454:	e000      	b.n	8000458 <SPI_VerifyResponse+0x16>
	}
	return 0;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 fbb1 	bl	8000bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fea5 	bl	80001e4 <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a8:	08000c6c 	.word	0x08000c6c
  ldr r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <GPIO_PeriClockControl>:
 *
 * @Note         - None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d141      	bne.n	800054e <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a43      	ldr	r2, [pc, #268]	; (80005dc <GPIO_PeriClockControl+0x124>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004d2:	4b43      	ldr	r3, [pc, #268]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80004de:	e077      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a40      	ldr	r2, [pc, #256]	; (80005e4 <GPIO_PeriClockControl+0x12c>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004e8:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f4:	e06c      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a3b      	ldr	r2, [pc, #236]	; (80005e8 <GPIO_PeriClockControl+0x130>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004fe:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a37      	ldr	r2, [pc, #220]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050a:	e061      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <GPIO_PeriClockControl+0x134>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000514:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000520:	e056      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a32      	ldr	r2, [pc, #200]	; (80005f0 <GPIO_PeriClockControl+0x138>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a2c      	ldr	r2, [pc, #176]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000536:	e04b      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <GPIO_PeriClockControl+0x13c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d147      	bne.n	80005d0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054c:	e040      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <GPIO_PeriClockControl+0x124>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800055c:	f023 0301 	bic.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000562:	e035      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <GPIO_PeriClockControl+0x12c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000572:	f023 0302 	bic.w	r3, r3, #2
 8000576:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000578:	e02a      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <GPIO_PeriClockControl+0x130>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 8000588:	f023 0304 	bic.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058e:	e01f      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <GPIO_PeriClockControl+0x134>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 800059e:	f023 0308 	bic.w	r3, r3, #8
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a4:	e014      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <GPIO_PeriClockControl+0x138>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d106      	bne.n	80005bc <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80005b4:	f023 0310 	bic.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ba:	e009      	b.n	80005d0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <GPIO_PeriClockControl+0x13c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d105      	bne.n	80005d0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <GPIO_PeriClockControl+0x128>)
 80005ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021c00 	.word	0x40021c00

080005f8 <GPIO_Init>:
 * @Note         - None
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)

{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	// Enable the peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2101      	movs	r1, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff56 	bl	80004b8 <GPIO_PeriClockControl>

	uint32_t temp=0;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d81f      	bhi.n	8000658 <GPIO_Init+0x60>
	{
		//non interupt mode '
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	2303      	movs	r3, #3
 8000638:	408b      	lsls	r3, r1
 800063a:	43db      	mvns	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	400a      	ands	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e0a1      	b.n	800079c <GPIO_Init+0x1a4>
	}else
	{
		//interupt mode

		//1.config interupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b05      	cmp	r3, #5
 800065e:	d117      	bne.n	8000690 <GPIO_Init+0x98>
		{
			// config the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b9e      	ldr	r3, [pc, #632]	; (80008dc <GPIO_Init+0x2e4>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a9a      	ldr	r2, [pc, #616]	; (80008dc <GPIO_Init+0x2e4>)
 8000672:	430b      	orrs	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000676:	4b99      	ldr	r3, [pc, #612]	; (80008dc <GPIO_Init+0x2e4>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7912      	ldrb	r2, [r2, #4]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	43d2      	mvns	r2, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a94      	ldr	r2, [pc, #592]	; (80008dc <GPIO_Init+0x2e4>)
 800068a:	400b      	ands	r3, r1
 800068c:	6093      	str	r3, [r2, #8]
 800068e:	e035      	b.n	80006fc <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b04      	cmp	r3, #4
 8000696:	d117      	bne.n	80006c8 <GPIO_Init+0xd0>
		{
			// config the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000698:	4b90      	ldr	r3, [pc, #576]	; (80008dc <GPIO_Init+0x2e4>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a8c      	ldr	r2, [pc, #560]	; (80008dc <GPIO_Init+0x2e4>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	4b8b      	ldr	r3, [pc, #556]	; (80008dc <GPIO_Init+0x2e4>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7912      	ldrb	r2, [r2, #4]
 80006b6:	4611      	mov	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	408a      	lsls	r2, r1
 80006bc:	43d2      	mvns	r2, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a86      	ldr	r2, [pc, #536]	; (80008dc <GPIO_Init+0x2e4>)
 80006c2:	400b      	ands	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	e019      	b.n	80006fc <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d115      	bne.n	80006fc <GPIO_Init+0x104>
		{
			// config both the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d0:	4b82      	ldr	r3, [pc, #520]	; (80008dc <GPIO_Init+0x2e4>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7912      	ldrb	r2, [r2, #4]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <GPIO_Init+0x2e4>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <GPIO_Init+0x2e4>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7912      	ldrb	r2, [r2, #4]
 80006ee:	4611      	mov	r1, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	408a      	lsls	r2, r1
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a79      	ldr	r2, [pc, #484]	; (80008dc <GPIO_Init+0x2e4>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
		}

			//2.configure the GPIO port selection  in SYSCFG_EXTICR

			uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	089b      	lsrs	r3, r3, #2
 8000702:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	f003 0303 	and.w	r3, r3, #3
 800070c:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a73      	ldr	r2, [pc, #460]	; (80008e0 <GPIO_Init+0x2e8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d024      	beq.n	8000762 <GPIO_Init+0x16a>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a71      	ldr	r2, [pc, #452]	; (80008e4 <GPIO_Init+0x2ec>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d01d      	beq.n	800075e <GPIO_Init+0x166>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a70      	ldr	r2, [pc, #448]	; (80008e8 <GPIO_Init+0x2f0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d016      	beq.n	800075a <GPIO_Init+0x162>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a6e      	ldr	r2, [pc, #440]	; (80008ec <GPIO_Init+0x2f4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d00f      	beq.n	8000756 <GPIO_Init+0x15e>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a6d      	ldr	r2, [pc, #436]	; (80008f0 <GPIO_Init+0x2f8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d008      	beq.n	8000752 <GPIO_Init+0x15a>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a6b      	ldr	r2, [pc, #428]	; (80008f4 <GPIO_Init+0x2fc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <GPIO_Init+0x156>
 800074a:	2307      	movs	r3, #7
 800074c:	e00a      	b.n	8000764 <GPIO_Init+0x16c>
 800074e:	2300      	movs	r3, #0
 8000750:	e008      	b.n	8000764 <GPIO_Init+0x16c>
 8000752:	2304      	movs	r3, #4
 8000754:	e006      	b.n	8000764 <GPIO_Init+0x16c>
 8000756:	2303      	movs	r3, #3
 8000758:	e004      	b.n	8000764 <GPIO_Init+0x16c>
 800075a:	2302      	movs	r3, #2
 800075c:	e002      	b.n	8000764 <GPIO_Init+0x16c>
 800075e:	2301      	movs	r3, #1
 8000760:	e000      	b.n	8000764 <GPIO_Init+0x16c>
 8000762:	2300      	movs	r3, #0
 8000764:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8000766:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <GPIO_Init+0x300>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a63      	ldr	r2, [pc, #396]	; (80008f8 <GPIO_Init+0x300>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portcode << (4*temp2) ;
 8000772:	7c7a      	ldrb	r2, [r7, #17]
 8000774:	7cbb      	ldrb	r3, [r7, #18]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	fa02 f103 	lsl.w	r1, r2, r3
 800077c:	4a5f      	ldr	r2, [pc, #380]	; (80008fc <GPIO_Init+0x304>)
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	3302      	adds	r3, #2
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3.enable the exti interupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b55      	ldr	r3, [pc, #340]	; (80008dc <GPIO_Init+0x2e4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a51      	ldr	r2, [pc, #324]	; (80008dc <GPIO_Init+0x2e4>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	799b      	ldrb	r3, [r3, #6]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	4619      	mov	r1, r3
 80007be:	2303      	movs	r3, #3
 80007c0:	408b      	lsls	r3, r1
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	400a      	ands	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6899      	ldr	r1, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	430a      	orrs	r2, r1
 80007dc:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	461a      	mov	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	4619      	mov	r1, r3
 8000800:	2303      	movs	r3, #3
 8000802:	408b      	lsls	r3, r1
 8000804:	43db      	mvns	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	400a      	ands	r2, r1
 800080e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68d9      	ldr	r1, [r3, #12]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	430a      	orrs	r2, r1
 800081e:	60da      	str	r2, [r3, #12]

	// 4. configure output type
	temp = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7a1b      	ldrb	r3, [r3, #8]
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	4619      	mov	r1, r3
 8000842:	2301      	movs	r3, #1
 8000844:	408b      	lsls	r3, r1
 8000846:	43db      	mvns	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	400a      	ands	r2, r1
 8000850:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6859      	ldr	r1, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	430a      	orrs	r2, r1
 8000860:	605a      	str	r2, [r3, #4]

	// 5. configure alt functionality
	temp = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d131      	bne.n	80008d2 <GPIO_Init+0x2da>
	{
		// config alt function register
		uint32_t temp1,temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	60fb      	str	r3, [r7, #12]
		temp2 =  (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= (0xF << (4 * temp2));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	210f      	movs	r1, #15
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4011      	ands	r1, r2
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	3208      	adds	r2, #8
 80008a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	3208      	adds	r2, #8
 80008b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	4619      	mov	r1, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4311      	orrs	r1, r2
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	3208      	adds	r2, #8
 80008ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40013c00 	.word	0x40013c00
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40021c00 	.word	0x40021c00
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40013800 	.word	0x40013800

08000900 <GPIO_ReadFromInputPin>:
 * @Note         - None
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	fa22 f303 	lsr.w	r3, r2, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]

	return value;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SPI_PeriClockControl>:
 *
 * @Note         - None
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPI,uint8_t EnorDi)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d120      	bne.n	8000980 <SPI_PeriClockControl+0x54>
	{
		if(pSPI == SPI1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <SPI_PeriClockControl+0xa0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 800094c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
//		else if(pSPI == SPI4)
//		{
//			SPI4_PCLK_DI();
//		}
	}
}
 8000952:	e035      	b.n	80009c0 <SPI_PeriClockControl+0x94>
		else if(pSPI == SPI2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <SPI_PeriClockControl+0xa8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000968:	e02a      	b.n	80009c0 <SPI_PeriClockControl+0x94>
		else if(pSPI == SPI3)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <SPI_PeriClockControl+0xac>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d126      	bne.n	80009c0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 8000978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097e:	e01f      	b.n	80009c0 <SPI_PeriClockControl+0x94>
		if(pSPI == SPI1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <SPI_PeriClockControl+0xa0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 800098e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000992:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000994:	e014      	b.n	80009c0 <SPI_PeriClockControl+0x94>
		else if(pSPI == SPI2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <SPI_PeriClockControl+0xa8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 80009a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009aa:	e009      	b.n	80009c0 <SPI_PeriClockControl+0x94>
		else if(pSPI == SPI3)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SPI_PeriClockControl+0xac>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d105      	bne.n	80009c0 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SPI_PeriClockControl+0xa4>)
 80009ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40013000 	.word	0x40013000
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40003800 	.word	0x40003800
 80009d8:	40003c00 	.word	0x40003c00

080009dc <SPI_Init>:
 *
 * @Note         - None
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff9e 	bl	800092c <SPI_PeriClockControl>

	// first lets configue the SPI_CR1 register

	uint32_t tempreg = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]

	//1.Configure the device mode

	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	791b      	ldrb	r3, [r3, #4]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]

	//2. Configure the Bus Configure
	if(pSPIHandle->SPIConfig.SPI_Busconfig == SPI_BUS_CONFIG_FD)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	795b      	ldrb	r3, [r3, #5]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d104      	bne.n	8000a14 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e014      	b.n	8000a3e <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_Busconfig == SPI_BUS_CONFIG_HD)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d104      	bne.n	8000a26 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00b      	b.n	8000a3e <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_Busconfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	795b      	ldrb	r3, [r3, #5]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d107      	bne.n	8000a3e <SPI_Init+0x62>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a34:	60fb      	str	r3, [r7, #12]
		//RX must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3c:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	799b      	ldrb	r3, [r3, #6]
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	79db      	ldrb	r3, [r3, #7]
 8000a50:	02db      	lsls	r3, r3, #11
 8000a52:	461a      	mov	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7a1b      	ldrb	r3, [r3, #8]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	461a      	mov	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7a5b      	ldrb	r3, [r3, #9]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SPI_GetFlagStatus>:
 *
 * @Note         - None
 *
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SPI_SendData>:
 *
 * @Note         - This is blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000ab8:	e027      	b.n	8000b0a <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG == FLAG_RESET));
 8000aba:	bf00      	nop
 8000abc:	2100      	movs	r1, #0
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ffe0 	bl	8000a84 <SPI_GetFlagStatus>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f8      	bne.n	8000abc <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00e      	beq.n	8000af4 <SPI_SendData+0x48>
		{
			//16 bit DFF
			// Load data in to the DR
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	60da      	str	r2, [r3, #12]
			Len--;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
			Len--;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e00a      	b.n	8000b0a <SPI_SendData+0x5e>
		}
		else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	60da      	str	r2, [r3, #12]
			Len--;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1d4      	bne.n	8000aba <SPI_SendData+0xe>
		}
	}
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <SPI_ReceiveData>:
 *
 * @Note         - None
 *
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer, uint32_t Len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000b26:	e027      	b.n	8000b78 <SPI_ReceiveData+0x5e>
	{
		//1. wait until RXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_RXE_FLAG == FLAG_RESET));
 8000b28:	bf00      	nop
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff ffa9 	bl	8000a84 <SPI_GetFlagStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f8      	bne.n	8000b2a <SPI_ReceiveData+0x10>

		//2. check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00e      	beq.n	8000b62 <SPI_ReceiveData+0x48>
		{
			//16 bit DFF
			// Load data from the DR to Rx buffer
			*((uint16_t *)pRxBuffer) = pSPIx->DR;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	801a      	strh	r2, [r3, #0]
			Len--;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
			Len--;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRxBuffer++;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e00a      	b.n	8000b78 <SPI_ReceiveData+0x5e>
		}
		else
		{
			//8 bit DFF
			*(pRxBuffer) = pSPIx->DR;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	701a      	strb	r2, [r3, #0]
			Len--;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1d4      	bne.n	8000b28 <SPI_ReceiveData+0xe>
		}
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SPI_PeripheralControl>:
 *
 * @Note         - None
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d106      	bne.n	8000ba8 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
	}else

	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ba6:	e005      	b.n	8000bb4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SPI_SSOEConfig>:
 *
 * @Note         - None
 *
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnOrDi)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f043 0204 	orr.w	r2, r3, #4
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	605a      	str	r2, [r3, #4]
	}else

	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000bde:	e005      	b.n	8000bec <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f023 0204 	bic.w	r2, r3, #4
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	605a      	str	r2, [r3, #4]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <__libc_init_array>:
 8000bf8:	b570      	push	{r4, r5, r6, lr}
 8000bfa:	4d0d      	ldr	r5, [pc, #52]	; (8000c30 <__libc_init_array+0x38>)
 8000bfc:	4c0d      	ldr	r4, [pc, #52]	; (8000c34 <__libc_init_array+0x3c>)
 8000bfe:	1b64      	subs	r4, r4, r5
 8000c00:	10a4      	asrs	r4, r4, #2
 8000c02:	2600      	movs	r6, #0
 8000c04:	42a6      	cmp	r6, r4
 8000c06:	d109      	bne.n	8000c1c <__libc_init_array+0x24>
 8000c08:	4d0b      	ldr	r5, [pc, #44]	; (8000c38 <__libc_init_array+0x40>)
 8000c0a:	4c0c      	ldr	r4, [pc, #48]	; (8000c3c <__libc_init_array+0x44>)
 8000c0c:	f000 f818 	bl	8000c40 <_init>
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	10a4      	asrs	r4, r4, #2
 8000c14:	2600      	movs	r6, #0
 8000c16:	42a6      	cmp	r6, r4
 8000c18:	d105      	bne.n	8000c26 <__libc_init_array+0x2e>
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c20:	4798      	blx	r3
 8000c22:	3601      	adds	r6, #1
 8000c24:	e7ee      	b.n	8000c04 <__libc_init_array+0xc>
 8000c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c2a:	4798      	blx	r3
 8000c2c:	3601      	adds	r6, #1
 8000c2e:	e7f2      	b.n	8000c16 <__libc_init_array+0x1e>
 8000c30:	08000c64 	.word	0x08000c64
 8000c34:	08000c64 	.word	0x08000c64
 8000c38:	08000c64 	.word	0x08000c64
 8000c3c:	08000c68 	.word	0x08000c68

08000c40 <_init>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	bf00      	nop
 8000c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c46:	bc08      	pop	{r3}
 8000c48:	469e      	mov	lr, r3
 8000c4a:	4770      	bx	lr

08000c4c <_fini>:
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	bf00      	nop
 8000c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c52:	bc08      	pop	{r3}
 8000c54:	469e      	mov	lr, r3
 8000c56:	4770      	bx	lr
