
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e7c  08000e7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e7c  08000e7c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000e7c  08000e7c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e7c  08000e7c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e7c  08000e7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000014  08000e98  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000e98  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001824  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059a  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025f4  00000000  00000000  00022120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c8a  00000000  00000000  00024714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009f82  00000000  00000000  0002639e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000628  00000000  00000000  00030370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e64 	.word	0x08000e64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000e64 	.word	0x08000e64

080001d4 <main>:
void I2C1_Init(void);
void I2C1_GPIOInit(void);
void GPIO_ButtonInit(void);

int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af02      	add	r7, sp, #8
	uint8_t commandCode;
	uint8_t len;

	GPIO_ButtonInit();
 80001da:	f000 f88f 	bl	80002fc <GPIO_ButtonInit>

	I2C1_GPIOInit();
 80001de:	f000 f84f 	bl	8000280 <I2C1_GPIOInit>

	I2C1_Init();
 80001e2:	f000 f86f 	bl	80002c4 <I2C1_Init>

	// enable the clock peripheral j
	I2C_PeriClockControl(I2C1,ENABLE);
 80001e6:	2101      	movs	r1, #1
 80001e8:	4816      	ldr	r0, [pc, #88]	; (8000244 <main+0x70>)
 80001ea:	f000 f963 	bl	80004b4 <I2C_PeriClockControl>

	// ack bit is made 1 after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80001ee:	2101      	movs	r1, #1
 80001f0:	4814      	ldr	r0, [pc, #80]	; (8000244 <main+0x70>)
 80001f2:	f000 fbbd 	bl	8000970 <I2C_ManageAcking>

	while(1)
	{
	//wait button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80001f6:	bf00      	nop
 80001f8:	2100      	movs	r1, #0
 80001fa:	4813      	ldr	r0, [pc, #76]	; (8000248 <main+0x74>)
 80001fc:	f000 fdf8 	bl	8000df0 <GPIO_ReadFromInputPin>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f8      	beq.n	80001f8 <main+0x24>

		//to avoid button de-bouning relate issuse 200ms delay
		delay();
 8000206:	f000 f825 	bl	8000254 <delay>

		commandCode = 0x51;
 800020a:	2351      	movs	r3, #81	; 0x51
 800020c:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,&commandCode,1,SLAVE_ADD,I2C_ENABLE_SR);
 800020e:	1df9      	adds	r1, r7, #7
 8000210:	2301      	movs	r3, #1
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2368      	movs	r3, #104	; 0x68
 8000216:	2201      	movs	r2, #1
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <main+0x78>)
 800021a:	f000 fab5 	bl	8000788 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle,&len,1,SLAVE_ADD,I2C_ENABLE_SR);
 800021e:	1db9      	adds	r1, r7, #6
 8000220:	2301      	movs	r3, #1
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2368      	movs	r3, #104	; 0x68
 8000226:	2201      	movs	r2, #1
 8000228:	4808      	ldr	r0, [pc, #32]	; (800024c <main+0x78>)
 800022a:	f000 fb12 	bl	8000852 <I2C_MasterReceiveData>

		commandCode = 0x52;
 800022e:	2352      	movs	r3, #82	; 0x52
 8000230:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle,rcv_buf,1,SLAVE_ADD,I2C_DISABLE_SR);
 8000232:	2300      	movs	r3, #0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2368      	movs	r3, #104	; 0x68
 8000238:	2201      	movs	r2, #1
 800023a:	4905      	ldr	r1, [pc, #20]	; (8000250 <main+0x7c>)
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <main+0x78>)
 800023e:	f000 faa3 	bl	8000788 <I2C_MasterSendData>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000242:	e7d8      	b.n	80001f6 <main+0x22>
 8000244:	40005400 	.word	0x40005400
 8000248:	40020000 	.word	0x40020000
 800024c:	20000050 	.word	0x20000050
 8000250:	20000030 	.word	0x20000030

08000254 <delay>:
	}
	return 0;
}

void delay(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<50000/2;i++);
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	e002      	b.n	8000266 <delay+0x12>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3301      	adds	r3, #1
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800026c:	4293      	cmp	r3, r2
 800026e:	d9f7      	bls.n	8000260 <delay+0xc>
}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
	...

08000280 <I2C1_GPIOInit>:
/*
 * PB6->SCL
 * PB9->SDA
 */
void I2C1_GPIOInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <I2C1_GPIOInit+0x40>)
 8000288:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800028a:	2302      	movs	r3, #2
 800028c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800028e:	2301      	movs	r3, #1
 8000290:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 8000292:	2301      	movs	r3, #1
 8000294:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000296:	2304      	movs	r3, #4
 8000298:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029a:	2302      	movs	r3, #2
 800029c:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800029e:	2306      	movs	r3, #6
 80002a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc1f 	bl	8000ae8 <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80002aa:	2309      	movs	r3, #9
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fc19 	bl	8000ae8 <GPIO_Init>

}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400

080002c4 <I2C1_Init>:

void I2C1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0


	I2C1Handle.pI2Cx = I2C1;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <I2C1_Init+0x2c>)
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <I2C1_Init+0x30>)
 80002cc:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <I2C1_Init+0x2c>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADD;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <I2C1_Init+0x2c>)
 80002d6:	2261      	movs	r2, #97	; 0x61
 80002d8:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <I2C1_Init+0x2c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCL_Speed = I2C_SCL_SPEED_SM;
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <I2C1_Init+0x2c>)
 80002e2:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <I2C1_Init+0x34>)
 80002e4:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002e6:	4802      	ldr	r0, [pc, #8]	; (80002f0 <I2C1_Init+0x2c>)
 80002e8:	f000 f93c 	bl	8000564 <I2C_Init>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000050 	.word	0x20000050
 80002f4:	40005400 	.word	0x40005400
 80002f8:	000186a0 	.word	0x000186a0

080002fc <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	// this is gpio button init
	GPIO_Handle_t GPIOBtn;
	GPIOBtn.pGPIOx = GPIOA;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <GPIO_ButtonInit+0x34>)
 8000304:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000306:	2300      	movs	r3, #0
 8000308:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800030a:	2300      	movs	r3, #0
 800030c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030e:	2302      	movs	r3, #2
 8000310:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PIN_PU;
 8000312:	2301      	movs	r3, #1
 8000314:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000316:	2101      	movs	r1, #1
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <GPIO_ButtonInit+0x34>)
 800031a:	f000 fb45 	bl	80009a8 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fbe1 	bl	8000ae8 <GPIO_Init>
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40020000 	.word	0x40020000

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 fd5b 	bl	8000e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff35 	bl	80001d4 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000378:	08000e84 	.word	0x08000e84
  ldr r2, =_sbss
 800037c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000380:	20000078 	.word	0x20000078

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>

08000386 <I2C_ClearADDRFLAG>:
void I2C_MasterHandleTXEInterupt(I2C_Handle_t *pI2CHandle);
void I2C_MasterHandleRXNEInterupt(I2C_Handle_t *pI2CHandle);


static void I2C_ClearADDRFLAG(I2C_Handle_t *pI2CHandle)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b084      	sub	sp, #16
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check the device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d01f      	beq.n	80003dc <I2C_ClearADDRFLAG+0x56>
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_RX)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7f1b      	ldrb	r3, [r3, #28]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d112      	bne.n	80003ca <I2C_ClearADDRFLAG+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d11f      	bne.n	80003ec <I2C_ClearADDRFLAG+0x66>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fadc 	bl	8000970 <I2C_ManageAcking>

				//Clear the ADDR flag, read SR1, read SR2.
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	60fb      	str	r3, [r7, #12]
		//Clear the ADDR flag, read SR1, read SR2.
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
}
 80003c8:	e010      	b.n	80003ec <I2C_ClearADDRFLAG+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	60fb      	str	r3, [r7, #12]
}
 80003da:	e007      	b.n	80003ec <I2C_ClearADDRFLAG+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	60fb      	str	r3, [r7, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <I2C_ExecuteAddressPhaseWrite>:
 *
 * @Note         - None
 *
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000406:	78fb      	ldrb	r3, [r7, #3]
 8000408:	f023 0301 	bic.w	r3, r3, #1
 800040c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800040e:	78fa      	ldrb	r2, [r7, #3]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	611a      	str	r2, [r3, #16]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <I2C_ExecuteAddressPhaseRead>:
 *
 * @Note         - None
 *
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1 ;
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800043a:	78fa      	ldrb	r2, [r7, #3]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	611a      	str	r2, [r3, #16]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <I2C_GenerateStartCondition>:
 *
 * @Note         - None
 *
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	4013      	ands	r3, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000482:	2301      	movs	r3, #1
 8000484:	e000      	b.n	8000488 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <I2C_GenerateStopCondition>:
 *
 * @Note         - None
 *
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <I2C_PeriClockControl>:
 *
 * @Note         - None
 *
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2C,uint8_t EnorDi)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d120      	bne.n	8000508 <I2C_PeriClockControl+0x54>
	{
		if(pI2C == I2C1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a22      	ldr	r2, [pc, #136]	; (8000554 <I2C_PeriClockControl+0xa0>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <I2C_PeriClockControl+0xa4>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d2:	4a21      	ldr	r2, [pc, #132]	; (8000558 <I2C_PeriClockControl+0xa4>)
 80004d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d8:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}

	}
}
 80004da:	e035      	b.n	8000548 <I2C_PeriClockControl+0x94>
		else if(pI2C == I2C2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <I2C_PeriClockControl+0xa8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <I2C_PeriClockControl+0xa4>)
 80004e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e8:	4a1b      	ldr	r2, [pc, #108]	; (8000558 <I2C_PeriClockControl+0xa4>)
 80004ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004f0:	e02a      	b.n	8000548 <I2C_PeriClockControl+0x94>
		else if(pI2C == I2C3)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a1a      	ldr	r2, [pc, #104]	; (8000560 <I2C_PeriClockControl+0xac>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d126      	bne.n	8000548 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <I2C_PeriClockControl+0xa4>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <I2C_PeriClockControl+0xa4>)
 8000500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000504:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000506:	e01f      	b.n	8000548 <I2C_PeriClockControl+0x94>
		if(pI2C == I2C1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <I2C_PeriClockControl+0xa0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <I2C_PeriClockControl+0xa4>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <I2C_PeriClockControl+0xa4>)
 8000516:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800051c:	e014      	b.n	8000548 <I2C_PeriClockControl+0x94>
		else if(pI2C == I2C2)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <I2C_PeriClockControl+0xa8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <I2C_PeriClockControl+0xa4>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <I2C_PeriClockControl+0xa4>)
 800052c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000530:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000532:	e009      	b.n	8000548 <I2C_PeriClockControl+0x94>
		else if(pI2C == I2C3)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <I2C_PeriClockControl+0xac>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d105      	bne.n	8000548 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <I2C_PeriClockControl+0xa4>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <I2C_PeriClockControl+0xa4>)
 8000542:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40005400 	.word	0x40005400
 8000558:	40023800 	.word	0x40023800
 800055c:	40005800 	.word	0x40005800
 8000560:	40005c00 	.word	0x40005c00

08000564 <I2C_Init>:
 *
 * @Note         - None
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cxx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2101      	movs	r1, #1
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff9e 	bl	80004b4 <I2C_PeriClockControl>

	uint32_t tempreg = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]

	//1. ACK control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7a5b      	ldrb	r3, [r3, #9]
 8000580:	029b      	lsls	r3, r3, #10
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4313      	orrs	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]

	//2.Configure the FREG field of CR2
	tempreg = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 800058e:	f000 f895 	bl	80006bc <RCC_GetPCLK1Value>
 8000592:	4603      	mov	r3, r0
 8000594:	4a46      	ldr	r2, [pc, #280]	; (80006b0 <I2C_Init+0x14c>)
 8000596:	fba2 2303 	umull	r2, r3, r2, r3
 800059a:	0c9b      	lsrs	r3, r3, #18
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4313      	orrs	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005ac:	605a      	str	r2, [r3, #4]

	//3. Program the Device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7a1b      	ldrb	r3, [r3, #8]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	461a      	mov	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	609a      	str	r2, [r3, #8]

	//4. CCR caculations
	uint16_t ccr_value = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a36      	ldr	r2, [pc, #216]	; (80006b4 <I2C_Init+0x150>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d80f      	bhi.n	80005fe <I2C_Init+0x9a>
	{
		// mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()/(2*pI2CHandle->I2C_Config.I2C_SCL_Speed));
 80005de:	f000 f86d 	bl	80006bc <RCC_GetPCLK1Value>
 80005e2:	4602      	mov	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80005f0:	897b      	ldrh	r3, [r7, #10]
 80005f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e02d      	b.n	800065a <I2C_Init+0xf6>
	}else
	{
		//mode is fast mode
		tempreg |= (1 << 15);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000604:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle	<< 14);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	895b      	ldrh	r3, [r3, #10]
 800060a:	039b      	lsls	r3, r3, #14
 800060c:	461a      	mov	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	895b      	ldrh	r3, [r3, #10]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10b      	bne.n	8000634 <I2C_Init+0xd0>
		{
			ccr_value = (RCC_GetPCLK1Value()/(3*pI2CHandle->I2C_Config.I2C_SCL_Speed));
 800061c:	f000 f84e 	bl	80006bc <RCC_GetPCLK1Value>
 8000620:	4601      	mov	r1, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	4613      	mov	r3, r2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000630:	817b      	strh	r3, [r7, #10]
 8000632:	e00c      	b.n	800064e <I2C_Init+0xea>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value()/(25*pI2CHandle->I2C_Config.I2C_SCL_Speed));
 8000634:	f000 f842 	bl	80006bc <RCC_GetPCLK1Value>
 8000638:	4601      	mov	r1, r0
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	009a      	lsls	r2, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	fbb1 f3f3 	udiv	r3, r1, r3
 800064c:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800064e:	897b      	ldrh	r3, [r7, #10]
 8000650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	4313      	orrs	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	61da      	str	r2, [r3, #28]

	//Trise Configuration
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <I2C_Init+0x150>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d809      	bhi.n	8000680 <I2C_Init+0x11c>
	{
		// mode is standard mode

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1 ;
 800066c:	f000 f826 	bl	80006bc <RCC_GetPCLK1Value>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <I2C_Init+0x14c>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	0c9b      	lsrs	r3, r3, #18
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00d      	b.n	800069c <I2C_Init+0x138>
	}else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() *300)/1000000000U) +1;
 8000680:	f000 f81c 	bl	80006bc <RCC_GetPCLK1Value>
 8000684:	4603      	mov	r3, r0
 8000686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800068a:	fb02 f303 	mul.w	r3, r2, r3
 800068e:	0a5b      	lsrs	r3, r3, #9
 8000690:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <I2C_Init+0x154>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	09db      	lsrs	r3, r3, #7
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006a6:	621a      	str	r2, [r3, #32]
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	431bde83 	.word	0x431bde83
 80006b4:	000186a0 	.word	0x000186a0
 80006b8:	00044b83 	.word	0x00044b83

080006bc <RCC_GetPCLK1Value>:
 *
 * @Note         - None
 *
 */
uint32_t RCC_GetPCLK1Value(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = (RCC->CFGR >>2 )& 0x03;
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <RCC_GetPCLK1Value+0xa0>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0303 	and.w	r3, r3, #3
 80006ce:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80006d0:	7a7b      	ldrb	r3, [r7, #9]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d102      	bne.n	80006dc <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <RCC_GetPCLK1Value+0xa4>)
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e00b      	b.n	80006f4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80006dc:	7a7b      	ldrb	r3, [r7, #9]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d102      	bne.n	80006e8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <RCC_GetPCLK1Value+0xa8>)
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e005      	b.n	80006f4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 80006e8:	7a7b      	ldrb	r3, [r7, #9]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d102      	bne.n	80006f4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80006ee:	f000 f83f 	bl	8000770 <RCC_GetPLLOutputClock>
 80006f2:	60f8      	str	r0, [r7, #12]
	}

	//ahb1
	temp = ( (RCC->CFGR >> 10) & 0x07);
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <RCC_GetPCLK1Value+0xa0>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	0a9b      	lsrs	r3, r3, #10
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 0307 	and.w	r3, r3, #7
 8000700:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000702:	7a3b      	ldrb	r3, [r7, #8]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d802      	bhi.n	800070e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	72fb      	strb	r3, [r7, #11]
 800070c:	e006      	b.n	800071c <RCC_GetPCLK1Value+0x60>
	}else
	{
		ahbp = AHB_PreScaler[8-temp];
 800070e:	7a3b      	ldrb	r3, [r7, #8]
 8000710:	f1c3 0308 	rsb	r3, r3, #8
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <RCC_GetPCLK1Value+0xac>)
 8000716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071a:	72fb      	strb	r3, [r7, #11]
	}

	// apb1

	temp = ( (RCC->CFGR >> 10) & 0x07);
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <RCC_GetPCLK1Value+0xa0>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	0a9b      	lsrs	r3, r3, #10
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0307 	and.w	r3, r3, #7
 8000728:	723b      	strb	r3, [r7, #8]
		if(temp < 4)
 800072a:	7a3b      	ldrb	r3, [r7, #8]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d802      	bhi.n	8000736 <RCC_GetPCLK1Value+0x7a>
		{
			apb1p = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	72bb      	strb	r3, [r7, #10]
 8000734:	e004      	b.n	8000740 <RCC_GetPCLK1Value+0x84>
		}else
		{
			apb1p = APB_PreScaler[temp-4];
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	3b04      	subs	r3, #4
 800073a:	4a0c      	ldr	r2, [pc, #48]	; (800076c <RCC_GetPCLK1Value+0xb0>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
 800073e:	72bb      	strb	r3, [r7, #10]
		}

		pclk1 = (SystemClk/ahbp)/apb1p;
 8000740:	7afb      	ldrb	r3, [r7, #11]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	fbb2 f2f3 	udiv	r2, r2, r3
 8000748:	7abb      	ldrb	r3, [r7, #10]
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	00f42400 	.word	0x00f42400
 8000764:	007a1200 	.word	0x007a1200
 8000768:	20000000 	.word	0x20000000
 800076c:	20000010 	.word	0x20000010

08000770 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
	uint32_t value = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]

	return value;
 800077a:	687b      	ldr	r3, [r7, #4]
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <I2C_MasterSendData>:
 *
 * @Note         - None
 *
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint32_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	70fb      	strb	r3, [r7, #3]
	//1. Generate  the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fe56 	bl	800044c <I2C_GenerateStartCondition>

	///2. Confirm the start generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled by LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80007a0:	bf00      	nop
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe5f 	bl	800046c <I2C_GetFlagStatus>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f6      	beq.n	80007a2 <I2C_MasterSendData+0x1a>

	//3. Send the address of the Slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	78fa      	ldrb	r2, [r7, #3]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe19 	bl	80003f4 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 80007c2:	bf00      	nop
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe4e 	bl	800046c <I2C_GetFlagStatus>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f6      	beq.n	80007c4 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR Flag according to its software squence
	// Note: Until ADDR is cleared SCL will be stretched (pulled by LOW)
	I2C_ClearADDRFLAG(pI2CHandle);
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff fdd5 	bl	8000386 <I2C_ClearADDRFLAG>

	//6. Send the data until len becomes 0

	while(Len > 0 )
 80007dc:	e015      	b.n	800080a <I2C_MasterSendData+0x82>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); // wait till TXE set
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe3f 	bl	800046c <I2C_GetFlagStatus>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f5      	beq.n	80007e0 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
		Len--;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
	while(Len > 0 )
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e6      	bne.n	80007de <I2C_MasterSendData+0x56>
	}

	//7. When becomes zero wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// Note: TXE = 1 and BTF = 1 that both SR and DR are empty and next tranmission should begin

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000810:	bf00      	nop
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe26 	bl	800046c <I2C_GetFlagStatus>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f5      	beq.n	8000812 <I2C_MasterSendData+0x8a>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000826:	bf00      	nop
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2108      	movs	r1, #8
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe1c 	bl	800046c <I2C_GetFlagStatus>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f6      	beq.n	8000828 <I2C_MasterSendData+0xa0>

	//8. Generate STOP condition and master need to wait for the completion of stop condition
	if(Sr == I2C_DISABLE_SR)
 800083a:	7e3b      	ldrb	r3, [r7, #24]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d104      	bne.n	800084a <I2C_MasterSendData+0xc2>
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe25 	bl	8000494 <I2C_GenerateStopCondition>


}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <I2C_MasterReceiveData>:
 *
 * @Note         - None
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint8_t Len,uint8_t SlaveAddr,uint8_t Sr)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	4611      	mov	r1, r2
 800085e:	461a      	mov	r2, r3
 8000860:	460b      	mov	r3, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fded 	bl	800044c <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flags in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000872:	bf00      	nop
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fdf6 	bl	800046c <I2C_GetFlagStatus>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f6      	beq.n	8000874 <I2C_MasterReceiveData+0x22>
	//3. Send the address of slave with r/w bit set to R(1) (total 8 bit)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	79ba      	ldrb	r2, [r7, #6]
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fdc6 	bl	8000420 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fda9 	bl	80003f4 <I2C_ExecuteAddressPhaseWrite>

	//procedure to read  only 1 byte from slave

	if(Len == 1)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d121      	bne.n	80008ec <I2C_MasterReceiveData+0x9a>
	{
		// Disable acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f85e 	bl	8000970 <I2C_ManageAcking>

		// Clear the ADDR flag
		I2C_ClearADDRFLAG(pI2CHandle);
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fd66 	bl	8000386 <I2C_ClearADDRFLAG>

		// wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80008ba:	bf00      	nop
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdd2 	bl	800046c <I2C_GetFlagStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f6      	beq.n	80008bc <I2C_MasterReceiveData+0x6a>

		// Generate Stop Condition
		if(Sr == I2C_DISABLE_SR)
 80008ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <I2C_MasterReceiveData+0x8e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fdda 	bl	8000494 <I2C_GenerateStopCondition>

		// read Data in to buffer
		*pTxbuffer = pI2CHandle->pI2Cx->DR;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]

	}

	//procedure to read data from slave when Len > 1.
	if(Len > 1)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d930      	bls.n	8000954 <I2C_MasterReceiveData+0x102>
	{
		// clear the ADDR flag
		I2C_ClearADDRFLAG(pI2CHandle);
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff fd47 	bl	8000386 <I2C_ClearADDRFLAG>

		//read Data until Len becomes zero
		for(uint32_t i = Len;i>0;i--)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e027      	b.n	800094e <I2C_MasterReceiveData+0xfc>
		{
			// wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 80008fe:	bf00      	nop
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fdb0 	bl	800046c <I2C_GetFlagStatus>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f6      	beq.n	8000900 <I2C_MasterReceiveData+0xae>

			if(i == 2) // if last 2 bytes are remaining
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d10e      	bne.n	8000936 <I2C_MasterReceiveData+0xe4>
			{
				// clear ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f826 	bl	8000970 <I2C_ManageAcking>

				// stop bit condition
				if(Sr == I2C_DISABLE_SR)
 8000924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <I2C_MasterReceiveData+0xe4>
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fdaf 	bl	8000494 <I2C_GenerateStopCondition>
			}

			// read data from data register in to the buffer
			*pTxbuffer = pI2CHandle->pI2Cx->DR;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	701a      	strb	r2, [r3, #0]

			//incement the buffer address
			pTxbuffer++;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	3301      	adds	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len;i>0;i--)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3b01      	subs	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1d4      	bne.n	80008fe <I2C_MasterReceiveData+0xac>
		}
	}

	//re- enable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	7a5b      	ldrb	r3, [r3, #9]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <I2C_MasterReceiveData+0x116>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f804 	bl	8000970 <I2C_ManageAcking>
	}
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d106      	bne.n	8000990 <I2C_ManageAcking+0x20>
	{
		//enable the Ack
		pI2Cx->CR1 |=  (1 << I2C_CR1_ACK);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_ACK);
	}
}
 800098e:	e005      	b.n	800099c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &=  ~(1 << I2C_CR1_ACK);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <GPIO_PeriClockControl>:
 *
 * @Note         - None
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d141      	bne.n	8000a3e <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a43      	ldr	r2, [pc, #268]	; (8000acc <GPIO_PeriClockControl+0x124>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a42      	ldr	r2, [pc, #264]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80009ce:	e077      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a40      	ldr	r2, [pc, #256]	; (8000ad4 <GPIO_PeriClockControl+0x12c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a3c      	ldr	r2, [pc, #240]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e4:	e06c      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a3b      	ldr	r2, [pc, #236]	; (8000ad8 <GPIO_PeriClockControl+0x130>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fa:	e061      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a37      	ldr	r2, [pc, #220]	; (8000adc <GPIO_PeriClockControl+0x134>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a10:	e056      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <GPIO_PeriClockControl+0x138>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a26:	e04b      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <GPIO_PeriClockControl+0x13c>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d147      	bne.n	8000ac0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3c:	e040      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a22      	ldr	r2, [pc, #136]	; (8000acc <GPIO_PeriClockControl+0x124>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a52:	e035      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <GPIO_PeriClockControl+0x12c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a62:	f023 0302 	bic.w	r3, r3, #2
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a68:	e02a      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <GPIO_PeriClockControl+0x130>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7e:	e01f      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <GPIO_PeriClockControl+0x134>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000a8e:	f023 0308 	bic.w	r3, r3, #8
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a94:	e014      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <GPIO_PeriClockControl+0x138>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000aa4:	f023 0310 	bic.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aaa:	e009      	b.n	8000ac0 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOH)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <GPIO_PeriClockControl+0x13c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d105      	bne.n	8000ac0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <GPIO_PeriClockControl+0x128>)
 8000aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40021c00 	.word	0x40021c00

08000ae8 <GPIO_Init>:
 * @Note         - None
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)

{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	// Enable the peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff56 	bl	80009a8 <GPIO_PeriClockControl>

	uint32_t temp=0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d81f      	bhi.n	8000b48 <GPIO_Init+0x60>
	{
		//non interupt mode '
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	4619      	mov	r1, r3
 8000b26:	2303      	movs	r3, #3
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	400a      	ands	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e0a1      	b.n	8000c8c <GPIO_Init+0x1a4>
	}else
	{
		//interupt mode

		//1.config interupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	795b      	ldrb	r3, [r3, #5]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d117      	bne.n	8000b80 <GPIO_Init+0x98>
		{
			// config the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b50:	4b9e      	ldr	r3, [pc, #632]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	7912      	ldrb	r2, [r2, #4]
 8000b58:	4611      	mov	r1, r2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	408a      	lsls	r2, r1
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b66:	4b99      	ldr	r3, [pc, #612]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	7912      	ldrb	r2, [r2, #4]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	2201      	movs	r2, #1
 8000b72:	408a      	lsls	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	4611      	mov	r1, r2
 8000b78:	4a94      	ldr	r2, [pc, #592]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	6093      	str	r3, [r2, #8]
 8000b7e:	e035      	b.n	8000bec <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	795b      	ldrb	r3, [r3, #5]
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d117      	bne.n	8000bb8 <GPIO_Init+0xd0>
		{
			// config the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b88:	4b90      	ldr	r3, [pc, #576]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	7912      	ldrb	r2, [r2, #4]
 8000b90:	4611      	mov	r1, r2
 8000b92:	2201      	movs	r2, #1
 8000b94:	408a      	lsls	r2, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	4a8c      	ldr	r2, [pc, #560]	; (8000dcc <GPIO_Init+0x2e4>)
 8000b9a:	430b      	orrs	r3, r1
 8000b9c:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	; (8000dcc <GPIO_Init+0x2e4>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	7912      	ldrb	r2, [r2, #4]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	2201      	movs	r2, #1
 8000baa:	408a      	lsls	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a86      	ldr	r2, [pc, #536]	; (8000dcc <GPIO_Init+0x2e4>)
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	60d3      	str	r3, [r2, #12]
 8000bb6:	e019      	b.n	8000bec <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	795b      	ldrb	r3, [r3, #5]
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d115      	bne.n	8000bec <GPIO_Init+0x104>
		{
			// config both the FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bc0:	4b82      	ldr	r3, [pc, #520]	; (8000dcc <GPIO_Init+0x2e4>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	7912      	ldrb	r2, [r2, #4]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	2201      	movs	r2, #1
 8000bcc:	408a      	lsls	r2, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4a7e      	ldr	r2, [pc, #504]	; (8000dcc <GPIO_Init+0x2e4>)
 8000bd2:	430b      	orrs	r3, r1
 8000bd4:	60d3      	str	r3, [r2, #12]

			// Clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd6:	4b7d      	ldr	r3, [pc, #500]	; (8000dcc <GPIO_Init+0x2e4>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	7912      	ldrb	r2, [r2, #4]
 8000bde:	4611      	mov	r1, r2
 8000be0:	2201      	movs	r2, #1
 8000be2:	408a      	lsls	r2, r1
 8000be4:	4611      	mov	r1, r2
 8000be6:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <GPIO_Init+0x2e4>)
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6093      	str	r3, [r2, #8]
		}

			//2.configure the GPIO port selection  in SYSCFG_EXTICR

			uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	791b      	ldrb	r3, [r3, #4]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a73      	ldr	r2, [pc, #460]	; (8000dd0 <GPIO_Init+0x2e8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d024      	beq.n	8000c52 <GPIO_Init+0x16a>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a71      	ldr	r2, [pc, #452]	; (8000dd4 <GPIO_Init+0x2ec>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d01d      	beq.n	8000c4e <GPIO_Init+0x166>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a70      	ldr	r2, [pc, #448]	; (8000dd8 <GPIO_Init+0x2f0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d016      	beq.n	8000c4a <GPIO_Init+0x162>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a6e      	ldr	r2, [pc, #440]	; (8000ddc <GPIO_Init+0x2f4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00f      	beq.n	8000c46 <GPIO_Init+0x15e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a6d      	ldr	r2, [pc, #436]	; (8000de0 <GPIO_Init+0x2f8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d008      	beq.n	8000c42 <GPIO_Init+0x15a>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a6b      	ldr	r2, [pc, #428]	; (8000de4 <GPIO_Init+0x2fc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <GPIO_Init+0x156>
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	e00a      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e008      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e006      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c46:	2303      	movs	r3, #3
 8000c48:	e004      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	e002      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <GPIO_Init+0x16c>
 8000c52:	2300      	movs	r3, #0
 8000c54:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8000c56:	4b64      	ldr	r3, [pc, #400]	; (8000de8 <GPIO_Init+0x300>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <GPIO_Init+0x300>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portcode << (4*temp2) ;
 8000c62:	7c7a      	ldrb	r2, [r7, #17]
 8000c64:	7cbb      	ldrb	r3, [r7, #18]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	fa02 f103 	lsl.w	r1, r2, r3
 8000c6c:	4a5f      	ldr	r2, [pc, #380]	; (8000dec <GPIO_Init+0x304>)
 8000c6e:	7cfb      	ldrb	r3, [r7, #19]
 8000c70:	3302      	adds	r3, #2
 8000c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3.enable the exti interupt delivery using IMR
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c76:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <GPIO_Init+0x2e4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	7912      	ldrb	r2, [r2, #4]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	2201      	movs	r2, #1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a51      	ldr	r2, [pc, #324]	; (8000dcc <GPIO_Init+0x2e4>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	799b      	ldrb	r3, [r3, #6]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	4619      	mov	r1, r3
 8000cae:	2303      	movs	r3, #3
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	400a      	ands	r2, r1
 8000cbc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6899      	ldr	r1, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	79db      	ldrb	r3, [r3, #7]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	408b      	lsls	r3, r1
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68d9      	ldr	r1, [r3, #12]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	60da      	str	r2, [r3, #12]

	// 4. configure output type
	temp = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7a1b      	ldrb	r3, [r3, #8]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	791b      	ldrb	r3, [r3, #4]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	4619      	mov	r1, r3
 8000d32:	2301      	movs	r3, #1
 8000d34:	408b      	lsls	r3, r1
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	400a      	ands	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6859      	ldr	r1, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	605a      	str	r2, [r3, #4]

	// 5. configure alt functionality
	temp = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	795b      	ldrb	r3, [r3, #5]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d131      	bne.n	8000dc2 <GPIO_Init+0x2da>
	{
		// config alt function register
		uint32_t temp1,temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	08db      	lsrs	r3, r3, #3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	60fb      	str	r3, [r7, #12]
		temp2 =  (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= (0xF << (4 * temp2));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	210f      	movs	r1, #15
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4011      	ands	r1, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7a5b      	ldrb	r3, [r3, #9]
 8000da8:	4619      	mov	r1, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4311      	orrs	r1, r2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40013c00 	.word	0x40013c00
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020c00 	.word	0x40020c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40021c00 	.word	0x40021c00
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40013800 	.word	0x40013800

08000df0 <GPIO_ReadFromInputPin>:
 * @Note         - None
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]

	return value;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <__libc_init_array>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4d0d      	ldr	r5, [pc, #52]	; (8000e54 <__libc_init_array+0x38>)
 8000e20:	4c0d      	ldr	r4, [pc, #52]	; (8000e58 <__libc_init_array+0x3c>)
 8000e22:	1b64      	subs	r4, r4, r5
 8000e24:	10a4      	asrs	r4, r4, #2
 8000e26:	2600      	movs	r6, #0
 8000e28:	42a6      	cmp	r6, r4
 8000e2a:	d109      	bne.n	8000e40 <__libc_init_array+0x24>
 8000e2c:	4d0b      	ldr	r5, [pc, #44]	; (8000e5c <__libc_init_array+0x40>)
 8000e2e:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <__libc_init_array+0x44>)
 8000e30:	f000 f818 	bl	8000e64 <_init>
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	2600      	movs	r6, #0
 8000e3a:	42a6      	cmp	r6, r4
 8000e3c:	d105      	bne.n	8000e4a <__libc_init_array+0x2e>
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e44:	4798      	blx	r3
 8000e46:	3601      	adds	r6, #1
 8000e48:	e7ee      	b.n	8000e28 <__libc_init_array+0xc>
 8000e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4e:	4798      	blx	r3
 8000e50:	3601      	adds	r6, #1
 8000e52:	e7f2      	b.n	8000e3a <__libc_init_array+0x1e>
 8000e54:	08000e7c 	.word	0x08000e7c
 8000e58:	08000e7c 	.word	0x08000e7c
 8000e5c:	08000e7c 	.word	0x08000e7c
 8000e60:	08000e80 	.word	0x08000e80

08000e64 <_init>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	bf00      	nop
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr

08000e70 <_fini>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr
